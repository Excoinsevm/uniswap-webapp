// This script initializes empty local Harthat network with relevant contracts

const { ContractFactory, BigNumber, utils, constants } = require('ethers');

const weth9Artifact = require('@lobanov/uniswap-v2-periphery/build/WETH9.json');
const uniswapV2FactoryArtifact = require('@lobanov/uniswap-v2-core/build/UniswapV2Factory.json');
const uniswapV2RouterArtifact = require('@lobanov/uniswap-v2-periphery/build/UniswapV2Router02.json');

const fs = require('fs/promises');

async function main() {
  const allSigners = await hre.ethers.getSigners();
  const deployingSigner = allSigners[0];
  const myAddress = deployingSigner.address;
  console.log(`All deployed contracts will be signed by ${myAddress}`);

  const weth9Factory = new ContractFactory(weth9Artifact.abi, weth9Artifact.bytecode, deployingSigner);
  const uniswapV2FactoryFactory = new ContractFactory(uniswapV2FactoryArtifact.abi, uniswapV2FactoryArtifact.bytecode, deployingSigner);
  const uniswapV2RouterFactory = new ContractFactory(uniswapV2RouterArtifact.abi, uniswapV2RouterArtifact.bytecode, deployingSigner);

  const weth9Contract = await weth9Factory.deploy(); // no args
  await weth9Contract.deployed();

  console.log("WETH9 deployed to: ", weth9Contract.address);

  const uniswapV2FactoryContract = await uniswapV2FactoryFactory.deploy(deployingSigner.address); // args: feeToSetter address
  await uniswapV2FactoryContract.deployed();

  console.log("UniswapV2Factory deployed to: ", uniswapV2FactoryContract.address);

  const uniswapV2RouterContract = await uniswapV2RouterFactory.deploy(uniswapV2FactoryContract.address, weth9Contract.address); // args: factory address, weth address
  await uniswapV2RouterContract.deployed();

  console.log("UniswapV2Router deployed to: ", uniswapV2RouterContract.address);

  const test1TokenFactory = await hre.ethers.getContractFactory("Test1ERC20");
  const test1TokenContract = await test1TokenFactory.deploy(BigNumber.from(1000).mul(constants.WeiPerEther));

  await test1TokenContract.deployed();

  console.log("Test1ERC20 deployed to: ", test1TokenContract.address);

  const test2TokenFactory = await hre.ethers.getContractFactory("Test2ERC20");
  const test2TokenContract = await test2TokenFactory.deploy(BigNumber.from(1000).mul(constants.WeiPerEther));

  await test2TokenContract.deployed();

  console.log("Test2ERC20 deployed to: ", test2TokenContract.address);

  const symbol = await test1TokenContract.symbol();
  const balanceRaw = await test1TokenContract.balanceOf(deployingSigner.address);
  const balance = utils.formatUnits(BigNumber.from(balanceRaw), 18);
  console.log(`Address ${deployingSigner.address} has the balance of ${balance} ${symbol}`);

  const env = [
    '# This is autogenerated file created by local-bootstrap.js\n',
    `REACT_APP_FACTORY_CONTRACT=${ uniswapV2FactoryContract.address }\n`,
    `REACT_APP_ROUTER_CONTRACT=${ uniswapV2RouterContract.address }\n`,
    `REACT_APP_WETH_CONTRACT=${ weth9Contract.address }\n`,
    `REACT_APP_BOOTSTRAP_ERC20_CONTRACTS=${ test1TokenContract.address },${ test2TokenContract.address }\n`,
  ]
  await fs.writeFile('.env.development.local', env);

  // provide the initial liquidity to Uniswap protocol
  const approveTx = await test1TokenContract.approve(uniswapV2RouterContract.address, balanceRaw);
  await approveTx.wait();
  console.log(`Gave router the allowance to use full balance of ${symbol}`);

  const liquidityTx = await uniswapV2RouterContract.addLiquidityETH(
    /* token */ test1TokenContract.address,
    /* amountTokenDesired */ BigNumber.from(500).mul(constants.WeiPerEther),
    /* amountTokenMin */ BigNumber.from(500).mul(constants.WeiPerEther),
    /* amountETHMin */ BigNumber.from(500).mul(constants.WeiPerEther),
    /* liquidityTo */ myAddress,
    /* deadline (10 min) */ Math.floor( Date.now() / 1000) + 600,
    { /* amountETHDesired */ value: BigNumber.from(500).mul(constants.WeiPerEther), gasLimit: 30000000 });
  await liquidityTx.wait();
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
